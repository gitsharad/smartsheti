openapi: 3.0.0
info:
  title: Smart Krushi Companion API - Authentication
  version: 1.0.0

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          description: User ID
        name:
          type: string
          description: User full name
        email:
          type: string
          format: email
          description: User email address
        phoneNumber:
          type: string
          description: User phone number
        role:
          type: string
          enum: [admin, farmer, technician]
          description: User role
        preferredLanguage:
          type: string
          enum: [english, marathi]
          description: Preferred language for communications
        isActive:
          type: boolean
          description: Whether the user account is active
        lastLogin:
          type: string
          format: date-time
          description: Last login timestamp

    BilingualMessage:
      type: object
      properties:
        english:
          type: string
          description: Message in English
        marathi:
          type: string
          description: Message in Marathi

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error code or identifier
        message:
          $ref: '#/components/schemas/BilingualMessage'

    TokenResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/BilingualMessage'
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: JWT refresh token
        user:
          $ref: '#/components/schemas/User'

paths:
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
                - phoneNumber
              properties:
                name:
                  type: string
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "john@example.com"
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: "securePassword123"
                phoneNumber:
                  type: string
                  example: "+911234567890"
                preferredLanguage:
                  type: string
                  enum: [english, marathi]
                  default: marathi
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        400:
          description: Invalid input or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags: [Authentication]
      summary: Login user
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh-token:
    post:
      tags: [Authentication]
      summary: Refresh access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description: New tokens generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/BilingualMessage'
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        401:
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/forgot-password:
    post:
      tags: [Authentication]
      summary: Request password reset
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        200:
          description: Password reset email sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/BilingualMessage'
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/reset-password/{token}:
    post:
      tags: [Authentication]
      summary: Reset password using token
      security: []
      parameters:
        - in: path
          name: token
          required: true
          schema:
            type: string
          description: Password reset token received via email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
              properties:
                password:
                  type: string
                  format: password
                  minLength: 8
      responses:
        200:
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        400:
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Logout user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        200:
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/BilingualMessage'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/profile:
    get:
      tags: [Authentication]
      summary: Get user profile
      responses:
        200:
          description: User profile retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/BilingualMessage'
                  user:
                    $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags: [Authentication]
      summary: Update user profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                phoneNumber:
                  type: string
                preferredLanguage:
                  type: string
                  enum: [english, marathi]
                password:
                  type: string
                  format: password
                  minLength: 8
      responses:
        200:
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    $ref: '#/components/schemas/BilingualMessage'
                  user:
                    $ref: '#/components/schemas/User'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /chatbot:
    post:
      tags: [Chatbot]
      summary: Ask the Marathi AI chatbot a question
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  example: "माझ्या शेतात पाणी कधी द्यावे?"
      responses:
        200:
          description: AI chatbot reply
          content:
            application/json:
              schema:
                type: object
                properties:
                  reply:
                    type: string
                    description: Marathi reply from the AI chatbot
                    example: "आपल्या शेतात पाणी द्यावे लागेल कारण मातीची आर्द्रता कमी आहे."
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: AI service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 